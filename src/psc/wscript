# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('psc', ['network', 'antenna', 'buildings', 'lte'])
    module.source = [
        'model/psc-hybrid-propagation-loss-model.cc',
        'model/psc-indoor-propagation-loss-model.cc',
        'model/psc-outdoor-propagation-loss-model.cc',
        'model/psc-3gpp-propagation-loss-model.cc',
        'model/psc-urbanmacrocell-propagation-loss-model.cc',
        'model/psc-scm-urbanmacrocell-propagation-loss-model.cc',
        'model/psc-udp-groupecho-server.cc',
        'helper/psc-udp-groupecho-helper.cc',
        ]

    module_test = bld.create_ns3_module_test_library('psc')
    module_test.source = [
        ]

    headers = bld(features='ns3header')
    headers.module = 'psc'
    headers.source = [
        'model/psc-hybrid-propagation-loss-model.h',
        'model/psc-indoor-propagation-loss-model.h',
        'model/psc-outdoor-propagation-loss-model.h',
        'model/psc-3gpp-propagation-loss-model.h',
        'model/psc-urbanmacrocell-propagation-loss-model.h',
        'model/psc-scm-urbanmacrocell-propagation-loss-model.h',
        'model/psc-udp-groupecho-server.h',
        'helper/psc-udp-groupecho-helper.h',
        ]

   # if bld.env.ENABLE_EXAMPLES:
   #     bld.recurse('examples')

    # bld.ns3_python_bindings()

